package workshop.prime

import spinal.core._
import spinal.lib._

import scala.collection.mutable.ArrayBuffer


object Prime{
  //Pure scala function which return true when the number is prime
  def apply(n : Int) =  ! ((2 until n-1) exists (n % _ == 0))

  //Explicit functional programming style
  def apply(n : UInt) : Bool = {
    val valueRange         = (0 until 1 << widthOf(n))  //what's the function of until and widthof?
    val primesInValueRange = valueRange.filter(i => Prime(i)) //what's the function of filter and operator =>?
    val primesHits         = primesInValueRange.map(primeValue => n === primeValue) // what's the function of map?
    val nIsPrime           = primesHits.orR // what's the function of orR?
    nIsPrime
  }

  //One liner functional programming style
  def apply2(n : UInt) : Bool = (0 until 1 << widthOf(n)).filter(i => Prime(i)).map(primeValue => n === primeValue).orR

  //Explicit traditional programming style
  def apply3(n : UInt) : Bool = {
    val nIsPrime = False
    for(i <- (0 until 1 << widthOf(n))){
      if(Prime(i)){ //Behave like a VHDL if generate
        when(n === i){ //Real hardware statement
          nIsPrime := True
        }
      }
    }
    nIsPrime
  }

  //Explicit traditional programming style but with more elaboration
  def apply4(n : UInt) : Bool = {
    val nIsPrime = False
    val primes = ArrayBuffer[Int]()
    for(i <- (0 until 1 << widthOf(n))){
      if(Prime(i)) primes += i
    }
    println(primes.mkString(",")) //Observe primes values for debug
    for(value <- primes){
      when(n === value){ //Real hardware statement
        nIsPrime := True
      }
    }
    nIsPrime
  }
}


